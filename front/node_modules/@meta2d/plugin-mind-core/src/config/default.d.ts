import { Pen } from "@meta2d/core";
export interface FuncOption {
    key: string;
    description?: string;
    menu: {
        text?: string;
        icon?: string;
        img?: string;
        dom: (self: FuncOption, pen: Pen, dom: HTMLElement) => string | HTMLElement;
    };
    popup?: any[] | ((self: FuncOption, pen: Pen, dom: HTMLElement) => (string | HTMLElement));
    popupEvent?: string;
    shadowRoot?: boolean;
    collapseEventOnMenu?: boolean;
    stopPropagation?: boolean;
    [key: string]: any;
}
export declare function generateColor(colorList?: string[]): Generator<any, void, unknown>;
export declare let funcList: ({
    key: string;
    description: string;
    menu: {
        text: string;
        img: string;
        icon?: undefined;
        dom?: undefined;
    };
    /**
     * @description 事件对应的回调函数
     * @param self 返回该选项自身
     * @param pen 返回当前操作的pen对象
     * */
    popupEvent: string;
    shadowRoot: boolean;
    collapseEventOnMenu: boolean;
    stopPropagation: boolean;
    collapseAnimate(self: any, pen: any, dom: HTMLElement): boolean;
    popupAnimate(self: any, pen: any, dom: HTMLElement): boolean;
    popup: {
        menu: {
            text: string;
            icon: string;
        };
        event: string;
        func(self: any, pen: any, dom: HTMLElement, father: any): void;
    }[];
    event?: undefined;
    func?: undefined;
    closeOther?: undefined;
    color?: undefined;
    dash?: undefined;
    width?: undefined;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList?: undefined;
    init?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
    collapseEvent?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
} | {
    key: string;
    description?: undefined;
    menu?: undefined;
    popupEvent?: undefined;
    shadowRoot?: undefined;
    collapseEventOnMenu?: undefined;
    stopPropagation?: undefined;
    collapseAnimate?: undefined;
    popupAnimate?: undefined;
    popup?: undefined;
    event?: undefined;
    func?: undefined;
    closeOther?: undefined;
    color?: undefined;
    dash?: undefined;
    width?: undefined;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList?: undefined;
    init?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
    collapseEvent?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
} | {
    key: string;
    description: string;
    menu: {
        text: string;
        icon: string;
        img?: undefined;
        dom?: undefined;
    };
    event: string;
    func(self: FuncOption, pen: any, dom: HTMLElement, e: MouseEvent): void;
    closeOther: boolean;
    popupEvent?: undefined;
    shadowRoot?: undefined;
    collapseEventOnMenu?: undefined;
    stopPropagation?: undefined;
    collapseAnimate?: undefined;
    popupAnimate?: undefined;
    popup?: undefined;
    color?: undefined;
    dash?: undefined;
    width?: undefined;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList?: undefined;
    init?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
    collapseEvent?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
} | {
    key: string;
    menu: {
        text: string;
        dom(self: FuncOption): string;
        img?: undefined;
        icon?: undefined;
    };
    color: string;
    dash: string;
    width: number;
    colorList: string[];
    popupEvent: string;
    /**
     * @description 初始化函数
     * @param self 配置项本身
     * @param pen 木匾画笔
     */
    init(self: FuncOption, pen: any): void;
    stopPropagation: boolean;
    collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
    popupAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
    popup(self: FuncOption, pen: any): HTMLElement;
    description?: undefined;
    shadowRoot?: undefined;
    collapseEventOnMenu?: undefined;
    event?: undefined;
    func?: undefined;
    closeOther?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
    collapseEvent?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
} | {
    key: string;
    description: string;
    menu: {
        text: string;
        dom(self: FuncOption, pen: any): string;
        img?: undefined;
        icon?: undefined;
    };
    color: string;
    lineStyle: string;
    width: number;
    init(self: FuncOption, pen: any): void;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList: string[];
    shadowRoot: boolean;
    collapseEventOnMenu: boolean;
    openEventOnTitle: boolean;
    popupEvent: string;
    collapseEvent: string;
    collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
    popupAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
    popup(self: FuncOption, pen: any): any;
    event: string;
    func(self: FuncOption, pen: any, dom: HTMLElement): void;
    stopPropagation?: undefined;
    closeOther?: undefined;
    dash?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
} | {
    key: string;
    description: string;
    menu: {
        text: string;
        icon: string;
        img?: undefined;
        dom?: undefined;
    };
    direction: string;
    childrenGap: number;
    levelGap: number;
    init(self: FuncOption, pen: any): void;
    activeDirection(self: FuncOption, pen: any, dom: HTMLElement): void;
    popupEvent: string;
    collapseEventOnMenu: boolean;
    collapseEvent: string;
    stopPropagation: boolean;
    animate: boolean;
    collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
    mounted(self: FuncOption, pen: Pen, dom: HTMLElement): void;
    popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
    onPopup(self: FuncOption, pen: Pen, dom: HTMLElement): void;
    onCollapse(self: FuncOption, pen: Pen): void;
    status: string;
    popup(self: FuncOption, pen: any): HTMLElement;
    shadowRoot?: undefined;
    event?: undefined;
    func?: undefined;
    closeOther?: undefined;
    color?: undefined;
    dash?: undefined;
    width?: undefined;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
} | {
    key: string;
    description: string;
    menu: {
        text: string;
        img: string;
        icon?: undefined;
        dom?: undefined;
    };
    /**
     * @description 事件对应的回调函数
     * @param self 返回该选项自身
     * @param pen 返回当前操作的pen对象
     * */
    popupEvent: string;
    shadowRoot: boolean;
    collapseEventOnMenu: boolean;
    stopPropagation: boolean;
    collapseAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
    popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
    popup: {
        menu: {
            name: string;
            icon: string;
        };
        event: string;
        func(self: FuncOption, pen: any, dom: HTMLElement, father: FuncOption): void;
    }[];
    event?: undefined;
    func?: undefined;
    closeOther?: undefined;
    color?: undefined;
    dash?: undefined;
    width?: undefined;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList?: undefined;
    init?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
    collapseEvent?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
} | {
    key: string;
    menu: {
        icon: string;
        text?: undefined;
        img?: undefined;
        dom?: undefined;
    };
    description: string;
    popupEvent: string;
    shadowRoot: boolean;
    stopPropagation: boolean;
    collapseAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
    popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
    popup: {
        menu: {
            icon: string;
        };
        event: string;
        name: string;
        func(self: FuncOption, pen: any, dom: HTMLElement, father: FuncOption): void;
    }[];
    collapseEventOnMenu?: undefined;
    event?: undefined;
    func?: undefined;
    closeOther?: undefined;
    color?: undefined;
    dash?: undefined;
    width?: undefined;
    /**
     * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
     * @param self 本配置对象
     * @param pen 返回当前pen对象
     * @param dom 返回此容器dom
     * */
    colorList?: undefined;
    init?: undefined;
    lineStyle?: undefined;
    openEventOnTitle?: undefined;
    collapseEvent?: undefined;
    direction?: undefined;
    childrenGap?: undefined;
    levelGap?: undefined;
    activeDirection?: undefined;
    animate?: undefined;
    mounted?: undefined;
    onPopup?: undefined;
    onCollapse?: undefined;
    status?: undefined;
})[];
export declare let defaultFuncs: {
    funcList: ({
        key: string;
        description: string;
        menu: {
            text: string;
            img: string;
            icon?: undefined;
            dom?: undefined;
        };
        /**
         * @description 事件对应的回调函数
         * @param self 返回该选项自身
         * @param pen 返回当前操作的pen对象
         * */
        popupEvent: string;
        shadowRoot: boolean;
        collapseEventOnMenu: boolean;
        stopPropagation: boolean;
        collapseAnimate(self: any, pen: any, dom: HTMLElement): boolean;
        popupAnimate(self: any, pen: any, dom: HTMLElement): boolean;
        popup: {
            menu: {
                text: string;
                icon: string;
            };
            event: string;
            func(self: any, pen: any, dom: HTMLElement, father: any): void;
        }[];
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description?: undefined;
        menu?: undefined;
        popupEvent?: undefined;
        shadowRoot?: undefined;
        collapseEventOnMenu?: undefined;
        stopPropagation?: undefined;
        collapseAnimate?: undefined;
        popupAnimate?: undefined;
        popup?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            icon: string;
            img?: undefined;
            dom?: undefined;
        };
        event: string;
        func(self: FuncOption, pen: any, dom: HTMLElement, e: MouseEvent): void;
        closeOther: boolean;
        popupEvent?: undefined;
        shadowRoot?: undefined;
        collapseEventOnMenu?: undefined;
        stopPropagation?: undefined;
        collapseAnimate?: undefined;
        popupAnimate?: undefined;
        popup?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        menu: {
            text: string;
            dom(self: FuncOption): string;
            img?: undefined;
            icon?: undefined;
        };
        color: string;
        dash: string;
        width: number;
        colorList: string[];
        popupEvent: string;
        /**
         * @description 初始化函数
         * @param self 配置项本身
         * @param pen 木匾画笔
         */
        init(self: FuncOption, pen: any): void;
        stopPropagation: boolean;
        collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popup(self: FuncOption, pen: any): HTMLElement;
        description?: undefined;
        shadowRoot?: undefined;
        collapseEventOnMenu?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            dom(self: FuncOption, pen: any): string;
            img?: undefined;
            icon?: undefined;
        };
        color: string;
        lineStyle: string;
        width: number;
        init(self: FuncOption, pen: any): void;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList: string[];
        shadowRoot: boolean;
        collapseEventOnMenu: boolean;
        openEventOnTitle: boolean;
        popupEvent: string;
        collapseEvent: string;
        collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popup(self: FuncOption, pen: any): any;
        event: string;
        func(self: FuncOption, pen: any, dom: HTMLElement): void;
        stopPropagation?: undefined;
        closeOther?: undefined;
        dash?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            icon: string;
            img?: undefined;
            dom?: undefined;
        };
        direction: string;
        childrenGap: number;
        levelGap: number;
        init(self: FuncOption, pen: any): void;
        activeDirection(self: FuncOption, pen: any, dom: HTMLElement): void;
        popupEvent: string;
        collapseEventOnMenu: boolean;
        collapseEvent: string;
        stopPropagation: boolean;
        animate: boolean;
        collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        mounted(self: FuncOption, pen: Pen, dom: HTMLElement): void;
        popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        onPopup(self: FuncOption, pen: Pen, dom: HTMLElement): void;
        onCollapse(self: FuncOption, pen: Pen): void;
        status: string;
        popup(self: FuncOption, pen: any): HTMLElement;
        shadowRoot?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            img: string;
            icon?: undefined;
            dom?: undefined;
        };
        /**
         * @description 事件对应的回调函数
         * @param self 返回该选项自身
         * @param pen 返回当前操作的pen对象
         * */
        popupEvent: string;
        shadowRoot: boolean;
        collapseEventOnMenu: boolean;
        stopPropagation: boolean;
        collapseAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popup: {
            menu: {
                name: string;
                icon: string;
            };
            event: string;
            func(self: FuncOption, pen: any, dom: HTMLElement, father: FuncOption): void;
        }[];
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        menu: {
            icon: string;
            text?: undefined;
            img?: undefined;
            dom?: undefined;
        };
        description: string;
        popupEvent: string;
        shadowRoot: boolean;
        stopPropagation: boolean;
        collapseAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popup: {
            menu: {
                icon: string;
            };
            event: string;
            name: string;
            func(self: FuncOption, pen: any, dom: HTMLElement, father: FuncOption): void;
        }[];
        collapseEventOnMenu?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    })[];
    getAllFuncDocs(): {
        name: string;
        key: string;
        description: string;
    }[];
    getFunc(...key: any[]): any[];
};
export declare let defaultFuncList: any;
export declare const toolboxDefault: {
    offset: number;
    showControl: boolean;
};
export declare let toolboxStyle: {
    backgroundColor: string;
    borderRadius: string;
    boxShadow: string;
    transform: string;
    position: string;
    outline: string;
    userSelect: string;
    visibility: string;
    zIndex: number;
    height: string;
    display: string;
    flexDirection: string;
    justifyContent: string;
    alignItems: string;
};
export declare let funcListStyle: {
    boxSizing: string;
    width: string;
    height: string;
    padding: string;
    display: string;
    alignItems: string;
};
export declare let controlStyle: {
    minWidth: string;
    opacity: string;
    display: string;
    cursor: string;
    alignItems: string;
    justifyContent: string;
    zIndex: number;
    height: string;
    backgroundColor: string;
    flexDirection: string;
    borderRadius: string;
};
export declare let extraStyle: {
    width: string;
    height: string;
    borderRadius: string;
    margin: string;
    backgroundColor: string;
};
export declare let basicFuncConfig: {
    collapseEventOnMenu: boolean;
    collapseEvent: string;
    popupEvent: string;
    shadowRoot: boolean;
};
declare const _default: {
    funcList: ({
        key: string;
        description: string;
        menu: {
            text: string;
            img: string;
            icon?: undefined;
            dom?: undefined;
        };
        /**
         * @description 事件对应的回调函数
         * @param self 返回该选项自身
         * @param pen 返回当前操作的pen对象
         * */
        popupEvent: string;
        shadowRoot: boolean;
        collapseEventOnMenu: boolean;
        stopPropagation: boolean;
        collapseAnimate(self: any, pen: any, dom: HTMLElement): boolean;
        popupAnimate(self: any, pen: any, dom: HTMLElement): boolean;
        popup: {
            menu: {
                text: string;
                icon: string;
            };
            event: string;
            func(self: any, pen: any, dom: HTMLElement, father: any): void;
        }[];
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description?: undefined;
        menu?: undefined;
        popupEvent?: undefined;
        shadowRoot?: undefined;
        collapseEventOnMenu?: undefined;
        stopPropagation?: undefined;
        collapseAnimate?: undefined;
        popupAnimate?: undefined;
        popup?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            icon: string;
            img?: undefined;
            dom?: undefined;
        };
        event: string;
        func(self: FuncOption, pen: any, dom: HTMLElement, e: MouseEvent): void;
        closeOther: boolean;
        popupEvent?: undefined;
        shadowRoot?: undefined;
        collapseEventOnMenu?: undefined;
        stopPropagation?: undefined;
        collapseAnimate?: undefined;
        popupAnimate?: undefined;
        popup?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        menu: {
            text: string;
            dom(self: FuncOption): string;
            img?: undefined;
            icon?: undefined;
        };
        color: string;
        dash: string;
        width: number;
        colorList: string[];
        popupEvent: string;
        /**
         * @description 初始化函数
         * @param self 配置项本身
         * @param pen 木匾画笔
         */
        init(self: FuncOption, pen: any): void;
        stopPropagation: boolean;
        collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popup(self: FuncOption, pen: any): HTMLElement;
        description?: undefined;
        shadowRoot?: undefined;
        collapseEventOnMenu?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            dom(self: FuncOption, pen: any): string;
            img?: undefined;
            icon?: undefined;
        };
        color: string;
        lineStyle: string;
        width: number;
        init(self: FuncOption, pen: any): void;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList: string[];
        shadowRoot: boolean;
        collapseEventOnMenu: boolean;
        openEventOnTitle: boolean;
        popupEvent: string;
        collapseEvent: string;
        collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        popup(self: FuncOption, pen: any): any;
        event: string;
        func(self: FuncOption, pen: any, dom: HTMLElement): void;
        stopPropagation?: undefined;
        closeOther?: undefined;
        dash?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            icon: string;
            img?: undefined;
            dom?: undefined;
        };
        direction: string;
        childrenGap: number;
        levelGap: number;
        init(self: FuncOption, pen: any): void;
        activeDirection(self: FuncOption, pen: any, dom: HTMLElement): void;
        popupEvent: string;
        collapseEventOnMenu: boolean;
        collapseEvent: string;
        stopPropagation: boolean;
        animate: boolean;
        collapseAnimate(self: FuncOption, pen: any, dom: HTMLElement): boolean;
        mounted(self: FuncOption, pen: Pen, dom: HTMLElement): void;
        popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        onPopup(self: FuncOption, pen: Pen, dom: HTMLElement): void;
        onCollapse(self: FuncOption, pen: Pen): void;
        status: string;
        popup(self: FuncOption, pen: any): HTMLElement;
        shadowRoot?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
    } | {
        key: string;
        description: string;
        menu: {
            text: string;
            img: string;
            icon?: undefined;
            dom?: undefined;
        };
        /**
         * @description 事件对应的回调函数
         * @param self 返回该选项自身
         * @param pen 返回当前操作的pen对象
         * */
        popupEvent: string;
        shadowRoot: boolean;
        collapseEventOnMenu: boolean;
        stopPropagation: boolean;
        collapseAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popup: {
            menu: {
                name: string;
                icon: string;
            };
            event: string;
            func(self: FuncOption, pen: any, dom: HTMLElement, father: FuncOption): void;
        }[];
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    } | {
        key: string;
        menu: {
            icon: string;
            text?: undefined;
            img?: undefined;
            dom?: undefined;
        };
        description: string;
        popupEvent: string;
        shadowRoot: boolean;
        stopPropagation: boolean;
        collapseAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popupAnimate(self: FuncOption, pen: Pen, dom: HTMLElement): boolean;
        popup: {
            menu: {
                icon: string;
            };
            event: string;
            name: string;
            func(self: FuncOption, pen: any, dom: HTMLElement, father: FuncOption): void;
        }[];
        collapseEventOnMenu?: undefined;
        event?: undefined;
        func?: undefined;
        closeOther?: undefined;
        color?: undefined;
        dash?: undefined;
        width?: undefined;
        /**
         * @description 设置下拉框的样式，你也可以使用webComponent，或者将vue组件转换为webComponent
         * @param self 本配置对象
         * @param pen 返回当前pen对象
         * @param dom 返回此容器dom
         * */
        colorList?: undefined;
        init?: undefined;
        lineStyle?: undefined;
        openEventOnTitle?: undefined;
        collapseEvent?: undefined;
        direction?: undefined;
        childrenGap?: undefined;
        levelGap?: undefined;
        activeDirection?: undefined;
        animate?: undefined;
        mounted?: undefined;
        onPopup?: undefined;
        onCollapse?: undefined;
        status?: undefined;
    })[];
    controlStyle: {
        minWidth: string;
        opacity: string;
        display: string;
        cursor: string;
        alignItems: string;
        justifyContent: string;
        zIndex: number;
        height: string;
        backgroundColor: string;
        flexDirection: string;
        borderRadius: string;
    };
    extraStyle: {
        width: string;
        height: string;
        borderRadius: string;
        margin: string;
        backgroundColor: string;
    };
    defaultFuncList: any;
    basicFuncConfig: {
        collapseEventOnMenu: boolean;
        collapseEvent: string;
        popupEvent: string;
        shadowRoot: boolean;
    };
};
export default _default;
export declare let DefaultCssVar: {
    '--toolboxItem-hover-backgroundColor': string;
    '--toolboxSliderItem-hover-backgroundColor': string;
    '--toolbox-move-outLine': string;
};
