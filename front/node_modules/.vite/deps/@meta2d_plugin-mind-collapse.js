import {
  isIntersection
} from "./chunk-Q6SK2TPB.js";
import "./chunk-RDEAKAAS.js";
import {
  deepClone,
  setLifeCycleFunc
} from "./chunk-PFF6Q7CQ.js";
import {
  __publicField
} from "./chunk-USJHI7ER.js";

// node_modules/@meta2d/plugin-mind-collapse/src/core/default.js
var defaultStyle = {
  backgroundColor: "transparent",
  border: "solid #4D4DFF 3px",
  borderRadius: "50%",
  boxShadow: "0px 6px 20px rgba(25,25,26,.06), 0px 2px 12px rgba(25,25,26,.04)",
  width: "12px",
  height: "12px",
  zIndex: "10",
  cursor: "pointer",
  display: "flex",
  boxSizing: "content-box",
  justifyContent: "center",
  alignItems: "center",
  color: "#4D4DFF",
  fontSize: "10px",
  fontWeight: "600"
};
var defaultConfig = {
  collapseIcon: `<span style="width: 9px;height: 3px;background-color:#4D4DFF "></span>`
};

// node_modules/@meta2d/plugin-mind-collapse/src/dom.js
var CollapseButton = class {
  constructor(parentHtml, style = {}) {
    // icon = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" t="1695196647299" class="icon" viewBox="0 0 1024 1024" version="1.1" p-id="15005" width="200" height="200"><path d="M353.96380445 470.37781333c-28.69589333 26.00504889-28.30791111 68.80711111 0.94776888 94.40711112l329.83722667 288.60643555c9.45834667 8.27619555 23.83416889 7.31704889 32.11036445-2.14129778s7.31704889-23.83416889-2.14129778-32.11036444l-329.83722667-288.60643556c-8.78023111-7.68227555-8.87921778-18.71075555-0.35612445-26.43399111l330.48803556-299.50520889c9.31157333-8.43889778 10.02040889-22.82951111 1.58037334-32.14222222-8.43889778-9.31157333-22.82951111-10.02040889-32.14222223-1.58037333l-330.48803555 299.50520888z" p-id="15006" fill="#ffffff"/></svg>';
    __publicField(this, "count", 0);
    __publicField(this, "collapseIcon", null);
    __publicField(this, "extendIcon", null);
    __publicField(this, "box");
    this.box = document.createElement("div");
    this.setStyle(defaultStyle);
    this.box.className = "hide_button";
    this.setStyle(style);
    parentHtml.appendChild(this.box);
  }
  onClick() {
    if (this.mind.childrenVisible) {
      let count = collapseChildPlugin.collapse(this);
      this.mind.singleton.collapseButton.setExtendIcon(count);
      _toolBoxPlugin.update(meta2d.findOne(this.mind.rootId));
    } else {
      collapseChildPlugin.extend(this, false);
      this.mind.singleton.collapseButton.setCollapseIcon();
      _toolBoxPlugin.update(meta2d.findOne(this.mind.rootId));
    }
  }
  /***
   * @description 设置图标 支持dom和
   */
  setCollapseIcon(icon) {
    if (icon instanceof HTMLElement) {
      this.box.innerHTML = ``;
      this.box.appendChild(icon);
      this.collapseIcon = icon;
      return;
    }
    if (typeof icon === "string") {
      this.collapseIcon = icon;
    }
    this.box.innerHTML = this.collapseIcon || defaultConfig.collapseIcon;
  }
  // 折叠子项 level为折叠层数 默认则折叠所有子项
  setStyle(style) {
    this.loadDefault();
    Object.keys(style).forEach((i) => {
      this.box.style[i] = style[i];
    });
  }
  loadDefault() {
    Object.keys(defaultStyle).forEach((key) => {
      this.box.style[key] = defaultStyle[key];
    });
  }
  setExtendIcon(icon) {
    if (this.extendIcon) {
      this.box.innerHTML = this.extendIcon;
      return;
    }
    if (icon instanceof HTMLElement) {
      this.box.innerHTML = ``;
      this.extendIcon = icon;
      this.box.appendChild(icon);
      return;
    }
    if (typeof icon === "string") {
      this.extendIcon = icon;
      this.box.innerHTML = this.extendIcon;
    } else if (typeof icon === "number") {
      this.box.innerHTML = icon + "";
    }
  }
  destroy() {
    this.box.parentNode.removeChild(this.box);
  }
  hide() {
    this.box.style.visibility = "hidden";
  }
  show() {
    this.box.style.visibility = "visible";
  }
  bindPen(penId) {
    let pen = meta2d.findOne(penId);
    this.box.onclick = this.onClick.bind(pen);
    if (pen.mind.childrenVisible) {
      this.setCollapseIcon();
    } else {
      this.setExtendIcon();
    }
  }
  translatePosition(pen, direction) {
    var _a, _b;
    const store = pen.calculative.canvas.store;
    const worldRect = pen.calculative.worldRect;
    if (!direction)
      direction = ((_a = pen.mind.collapse.config) == null ? void 0 : _a.direction) || pen.mind.direction;
    this.box.style.position = "absolute";
    this.box.style.outline = "none";
    this.box.style.zIndex = "10";
    let pos = {
      x: "-999",
      y: "-999"
    };
    switch (direction) {
      case "right":
        pos.x = worldRect.x + store.data.x + worldRect.width + 6 + "px";
        pos.y = worldRect.y + store.data.y + worldRect.height / 2 + "px";
        this.box.style.transform = "translateY(-50%)";
        break;
      case "left":
        pos.x = worldRect.x + store.data.x - 20 + "px";
        pos.y = worldRect.y + store.data.y + worldRect.height / 2 + "px";
        this.box.style.transform = "translateY(-50%)";
        break;
      case "top":
        pos.x = worldRect.x + store.data.x + worldRect.width / 2 + "px";
        pos.y = worldRect.y + store.data.y + -20 + "px";
        this.box.style.transform = "translateX(-50%)";
        break;
      case "bottom":
        pos.x = worldRect.x + store.data.x + worldRect.width / 2 + "px";
        pos.y = worldRect.y + store.data.y + worldRect.height + 6 + "px";
        this.box.style.transform = "translateX(-50%)";
        break;
      default:
        if ((_b = pen.mind.collapse) == null ? void 0 : _b.offset) {
          pos.x = worldRect.x + store.data.x + worldRect.width + 6 + pen.mind.collapse.offset.x + "px";
          pos.y = worldRect.y + store.data.y + worldRect.height / 2 + pen.mind.collapse.offset.y + "px";
        } else {
          pos.x = worldRect.x + store.data.x + worldRect.width + 6 + "px";
          pos.y = worldRect.y + store.data.y + worldRect.height / 2 + "px";
        }
    }
    this.box.style.left = pos.x;
    this.box.style.top = pos.y;
    this.box.style.userSelect = "none";
  }
};

// node_modules/@meta2d/plugin-mind-collapse/src/utils.js
function error(message) {
  console.error(`plugin-mind-collapse: ${message}`);
}
function isCollapsePen(pen) {
  var _a, _b;
  let root = meta2d.findOne((_a = pen.mind) == null ? void 0 : _a.rootId);
  return ((_b = pen.mind) == null ? void 0 : _b.type) === "node" && (collapseChildPlugin.target.includes(root.id) || collapseChildPlugin.target.includes(root.name) || isIntersection(collapseChildPlugin.target, root.tags));
}

// node_modules/@meta2d/plugin-mind-collapse/src/core/CollapseChildPlugin.js
var CONFIGS = {
  "style": "setStyle",
  "collapseIcon": "setCollapseIcon",
  "extendIcon": "setExtendIcon"
};
var addCallback = null;
var _toolBoxPlugin = null;
var collapseChildPlugin = {
  name: "collapse",
  status: false,
  target: [],
  ctx: null,
  // 安装插件
  install: (() => {
    let isInit = false;
    let optionMap = /* @__PURE__ */ new Map();
    return (pen, options) => {
      if (!isInit) {
        if (!_toolBoxPlugin) {
          _toolBoxPlugin = Array.from(meta2d.penPluginMap.keys()).find((i) => i.name === "mindBox");
        }
        if (!_toolBoxPlugin) {
          error("not find plugin-mind-core Plugin");
          return;
        }
        meta2d.on("undo", (e) => {
          let { initPens } = e;
          initPens == null ? void 0 : initPens.forEach((aPen) => {
            let pen2 = meta2d.findOne(aPen.id);
            if (isCollapsePen(pen2)) {
              collapseChildPlugin.init(pen2);
              collapseChildPlugin.loadOptions(pen2);
              _toolBoxPlugin.update(meta2d.findOne(pen2.mind.rootId));
            }
            pen2.calculative.canvas = meta2d.canvas;
          });
        });
        meta2d.on("redo", (e) => {
          let { pens } = e;
          pens == null ? void 0 : pens.forEach((aPen) => {
            let pen2 = meta2d.findOne(aPen.id);
            if (isCollapsePen(pen2)) {
              collapseChildPlugin.init(pen2);
              collapseChildPlugin.loadOptions(pen2);
              _toolBoxPlugin.update(meta2d.findOne(pen2.mind.rootId));
            }
            pen2.calculative.canvas = meta2d.canvas;
          });
        });
        meta2d.on("plugin:mindBox:open", (pen2) => {
          let t = meta2d.findOne(pen2.mind.rootId);
          if (collapseChildPlugin.target.includes(t.name) || isIntersection(collapseChildPlugin.target, t.tags) || pen2.mind.collapse && pen2.mind.type === "node") {
            collapseChildPlugin.init(pen2);
          }
        });
        meta2d.on("plugin:mindBox:addRoot", (pen2) => {
          if (isCollapsePen(pen2)) {
            collapseChildPlugin.init(pen2);
            pen2.mind.collapse.config = optionMap.get(pen2.tag) || optionMap.get(pen2.name);
          }
        });
        isInit = true;
      }
      let target = null;
      let isTag = false;
      if (pen.name) {
        target = pen.name;
      } else if (pen.tag) {
        isTag = true;
        target = pen.tag;
      } else if (pen.pen) {
        target = pen;
      } else {
        return;
      }
      if (typeof target === "object") {
        if (collapseChildPlugin.target.includes(target.id))
          return;
        collapseChildPlugin.target.push(target.id);
      } else {
        if (collapseChildPlugin.target.includes(target))
          return;
        collapseChildPlugin.target.push(target);
      }
      optionMap.set(target, deepClone(options || {}));
      if (addCallback) {
        meta2d.off("plugin:mindBox:addNode", addCallback);
      }
      if (typeof target === "object" && target.mind) {
        collapseChildPlugin.init(target);
      } else {
        addCallback = (data) => {
          let { pen: pen2, newPen } = data;
          if (isCollapsePen(newPen)) {
            if (pen2.mind.children.length >= 1 && pen2.mind.childrenVisible === false) {
              collapseChildPlugin.extend(pen2);
            }
            collapseChildPlugin.init(newPen);
            collapseChildPlugin.loadOptions(newPen);
          }
        };
        addCallback && meta2d.on("plugin:mindBox:addNode", addCallback);
      }
    };
  })(),
  // 插件卸载执行函数
  uninstall(pen, options) {
    let target = "";
    let isTag = false;
    if (pen.name) {
      target = pen.name;
    } else if (pen.tag) {
      isTag = true;
      target = pen.tag;
    } else if (pen.pen) {
      target = pen.pen.id;
    } else if (pen.id) {
      target = pen.id;
    } else {
      return error("uninstall parma error");
    }
    if (collapseChildPlugin.target.includes(target)) {
      if (typeof target === "string") {
        let pens = meta2d.store.data.pens.filter((pen2) => {
          var _a, _b;
          let root = meta2d.findOne((_a = pen2.mind) == null ? void 0 : _a.rootId);
          if (!root)
            return false;
          return ((_b = root.tags) == null ? void 0 : _b.includes(target)) || root.name === target || root.id === target;
        });
        pens.forEach((i) => {
          if (i.mind.collapse)
            this.unCombine(i);
        });
      }
      collapseChildPlugin.target.splice(collapseChildPlugin.target.indexOf(target), 1);
    }
  },
  unCombine(pen) {
    if (pen.mind.collapse) {
      collapseChildPlugin.combineLifeCycle(pen, true);
      delete pen.mind.collapse;
      pen.mind.singleton.collapseButton && pen.mind.singleton.collapseButton.destroy();
    }
  },
  init(pen, config = {}) {
    pen.mind.collapse ? "" : pen.mind.collapse = {};
    if (!pen.mind.singleton) {
      pen.mind.singleton = {};
    }
    pen.mind.singleton.collapseButton = new CollapseButton(meta2d.canvas.externalElements.parentElement, {});
    pen.mind.childrenVisible = pen.mind.childrenVisible || true;
    pen.mind.allChildrenCount = pen.mind.allChildrenCount || 0;
    pen.mind.singleton.collapseButton.bindPen(pen.id);
    pen.mind.singleton.collapseButton.translatePosition(pen);
    collapseChildPlugin.combineLifeCycle(pen);
    pen.mind.singleton.collapseButton.hide();
  },
  __loadDefault(pen) {
  },
  loadOptions(pen) {
    if (isCollapsePen(pen)) {
      let root = meta2d.findOne(pen.mind.rootId);
      let options = root.mind.collapse.config;
      if (typeof options !== "object")
        return;
      this.__loadDefault();
      Object.keys(options).forEach((key) => {
        if (key in CONFIGS) {
          if (key === "collapseIcon" && pen.mind.singleton.collapseButton.collapseIcon || key === "extendIcon" && pen.mind.singleton.collapseButton.extendIcon)
            return;
          pen.mind.singleton.collapseButton[CONFIGS[key]](options[key]);
        }
      });
    }
  },
  // 监听生命周期
  combineLifeCycle(target, del = false) {
    let onMouseLeave = null;
    let onMouseEnter = null;
    let onMouseUp = null;
    let onDestroy = null;
    let moveDebounce = null;
    if (del) {
      onMouseEnter = target.mind.collapse.onMouseEnter;
      onMouseLeave = target.mind.collapse.onMouseLeave;
      onMouseUp = target.mind.collapse.onMouseUp;
      onDestroy = target.mind.collapse.onDestroy;
      moveDebounce = target.mind.collapse.onMove;
    } else {
      onMouseEnter = (targetPen) => {
        if (targetPen.mind.children.length > 0) {
          targetPen.mind.singleton.collapseButton.translatePosition(targetPen);
          targetPen.mind.singleton.collapseButton.show();
          if (targetPen.mind.childrenVisible) {
            targetPen.mind.singleton.collapseButton.setCollapseIcon();
          }
        }
      };
      onMouseUp = (target2) => {
        collapseChildPlugin.loadOptions(target2);
      };
      onMouseLeave = (targetPen) => {
        var _a;
        if (targetPen.mind.childrenVisible) {
          (_a = targetPen.mind.singleton.collapseButton) == null ? void 0 : _a.hide();
        }
      };
      onDestroy = (targetPen) => {
        var _a, _b;
        (_a = targetPen.mind.singleton.collapseButton) == null ? void 0 : _a.hide();
        (_b = targetPen.mind.singleton.collapseButton) == null ? void 0 : _b.destroy();
        targetPen.mind.singleton.collapseButton = void 0;
      };
      moveDebounce = (targetPen) => {
        var _a, _b, _c, _d;
        (_b = (_a = targetPen.mind.singleton) == null ? void 0 : _a.collapseButton) == null ? void 0 : _b.translatePosition(targetPen);
        if (targetPen.mind.childrenVisible) {
          (_d = (_c = targetPen.mind.singleton) == null ? void 0 : _c.collapseButton) == null ? void 0 : _d.hide();
        }
      };
      target.mind.collapse.onMouseEnter = onMouseEnter;
      target.mind.collapse.onMouseUp = onMouseUp;
      target.mind.collapse.onMouseLeave = onMouseLeave;
      target.mind.collapse.onDestroy = onDestroy;
      target.mind.collapse.onMove = moveDebounce;
    }
    setLifeCycleFunc(target, "onMouseEnter", onMouseEnter, del);
    setLifeCycleFunc(target, "onMouseUp", onMouseUp, del);
    setLifeCycleFunc(target, "onMouseLeave", onMouseLeave, del);
    setLifeCycleFunc(target, "onDestroy", onDestroy, del);
    setLifeCycleFunc(target, "onMove", moveDebounce, del);
    if (del) {
      delete target.mind.collapse.onMouseEnter;
      delete target.mind.collapse.onMouseUp;
      delete target.mind.collapse.onMouseLeave;
      delete target.mind.collapse.onDestroy;
      delete target.mind.collapse.onMove;
    }
  },
  getAllChildNumber(pen) {
    if (!pen)
      return 0;
    let num = 0;
    let children = pen.mind.children;
    children.forEach((i) => {
      var _a;
      let child = meta2d.store.pens[i];
      if (!child)
        return 0;
      num += ((_a = child.mind.children) == null ? void 0 : _a.length) || 0;
      this.getAllChildNumber(child);
    });
    return num;
  },
  // 折叠函数
  collapse(pen) {
    toolbox.hide();
    pen.mind.childrenVisible = false;
    let children = pen.mind.children || [];
    let allCount = children.length || 0;
    this._setVisible(pen, false, true);
    this._controlChildButton(pen, false);
    pen.mind.allChildrenCount = allCount;
    meta2d.emit("plugin:collapse:collapse", { target: pen });
    return allCount;
  },
  _controlChildButton(pen, status, recursion = true) {
    if (!pen)
      return;
    let children = pen.mind.children || [];
    children.forEach((i) => {
      var _a, _b, _c;
      let child = meta2d.store.pens[i];
      if (child && child.mind.childrenVisible && !status && !pen.mind.childrenVisible) {
        (_a = child.mind.singleton.collapseButton) == null ? void 0 : _a.hide();
      } else if (child && !child.mind.childrenVisible && pen.mind.childrenVisible && child.mind.visible && status) {
        (_b = child.mind.singleton.collapseButton) == null ? void 0 : _b.show();
      } else {
        (_c = child.mind.singleton.collapseButton) == null ? void 0 : _c.hide();
      }
      if (recursion)
        this._controlChildButton(child, status, true);
    });
  },
  _setVisible(pen, visible, recursion = true) {
    if (!pen)
      return;
    let children = pen.mind.children || [];
    children.forEach((i) => {
      let child = meta2d.store.pens[i];
      if (!child)
        return;
      child.mind.visible = visible;
      let line = child.connectedLines[0];
      meta2d.setVisible(meta2d.findOne(line.lineId), visible, false);
      meta2d.setVisible(child, visible, false);
      if (recursion)
        this._setVisible(child, visible, true);
    });
  },
  // 展开函数
  extend(pen, recursion = true) {
    pen.mind.childrenVisible = true;
    if (!pen)
      return;
    this._setExtend(pen);
    this._controlChildButton(pen, true);
    meta2d.emit("plugin:collapse:extend", { target: pen });
  },
  _setExtend(pen, recursion = true) {
    if (!pen)
      return;
    let children = pen.mind.children || [];
    children.forEach((i) => {
      let child = meta2d.store.pens[i];
      if (!child)
        return;
      if (!pen.mind.childrenVisible)
        return;
      child.mind.visible = pen.mind.childrenVisible;
      let line = child.connectedLines[0];
      meta2d.setVisible(meta2d.findOne(line.lineId), pen.mind.childrenVisible, false);
      meta2d.setVisible(child, pen.mind.childrenVisible, false);
      if (recursion)
        this._setExtend(child, true);
    });
  }
};
export {
  CollapseButton,
  _toolBoxPlugin,
  collapseChildPlugin
};
//# sourceMappingURL=@meta2d_plugin-mind-collapse.js.map
