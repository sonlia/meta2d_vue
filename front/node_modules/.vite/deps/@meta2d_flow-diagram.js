import "./chunk-USJHI7ER.js";

// node_modules/@meta2d/flow-diagram/src/comment.js
function flowComment(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, ey } = pen.calculative.worldRect;
  const offsetX = width / 4;
  path.moveTo(x + offsetX, y);
  path.lineTo(x, y);
  path.lineTo(x, ey);
  path.lineTo(x + offsetX, ey);
  if (path instanceof Path2D)
    return path;
}
function flowCommentAnchors(pen) {
  const points = [
    {
      x: 0.25,
      y: 0
    },
    {
      x: 0.25,
      y: 1
    },
    {
      x: 0,
      y: 0.5
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: index + "",
      x,
      y,
      penId: pen.id
    };
  });
}

// node_modules/@meta2d/flow-diagram/src/data.js
function flowData(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, ex, ey } = pen.calculative.worldRect;
  const penOffsetX = pen.offsetX;
  let offsetX = width / 7;
  if (penOffsetX > 1) {
    offsetX = penOffsetX;
  } else if (penOffsetX > 0) {
    offsetX = width * penOffsetX;
  }
  path.moveTo(x + offsetX, y);
  path.lineTo(ex, y);
  path.lineTo(x + width - offsetX, ey);
  path.lineTo(x, ey);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function flowDataAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 13 / 14,
      y: 0.5
    },
    {
      x: 0.5,
      y: 1
    },
    {
      x: 1 / 14,
      y: 0.5
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/flow-diagram/src/display.js
function flowDisplay(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height, ex, ey } = pen.calculative.worldRect;
  const offsetX = width / 8;
  path.moveTo(x + offsetX, y);
  path.lineTo(ex - offsetX, y);
  path.bezierCurveTo(ex + offsetX / 3, y, ex + offsetX / 3, ey, ex - offsetX, ey);
  path.lineTo(x + offsetX, ey);
  path.lineTo(x, y + height / 2);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/flow-diagram/src/document.js
function flowDocument(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height, ex, center } = pen.calculative.worldRect;
  const centerX = center.x;
  const rightBottomY = y + height * 6 / 7;
  const offsetY = height / 6;
  path.moveTo(x, y);
  path.lineTo(ex, y);
  path.lineTo(ex, rightBottomY);
  path.bezierCurveTo(ex - 20, rightBottomY - offsetY, centerX + width / 5, rightBottomY - offsetY, centerX, rightBottomY);
  path.bezierCurveTo(centerX - width / 5, rightBottomY + offsetY, x, rightBottomY + offsetY, x, rightBottomY);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function flowDocumentAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 1,
      y: 0.5
    },
    {
      x: 0.5,
      y: 6 / 7
    },
    {
      x: 0,
      y: 0.5
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/flow-diagram/src/externStorage.js
function flowExternStorage(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, ex, ey } = pen.calculative.worldRect;
  const offsetX = width / 10;
  path.moveTo(x + offsetX * 2, y);
  path.bezierCurveTo(x - offsetX * 2 / 3, y, x - offsetX * 2 / 3, ey, x + offsetX * 2, ey);
  path.lineTo(ex, ey);
  path.bezierCurveTo(ex - offsetX, ey, ex - offsetX, y, ex, y);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/flow-diagram/src/internalStorage.js
function flowInternalStorage(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, ex, ey } = pen.calculative.worldRect;
  path.moveTo(x, y);
  path.lineTo(ex, y);
  path.lineTo(ex, ey);
  path.lineTo(x, ey);
  path.closePath();
  const offset = width / 7;
  path.moveTo(x, y + offset);
  path.lineTo(ex, y + offset);
  path.moveTo(x + offset, y);
  path.lineTo(x + offset, ey);
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/flow-diagram/src/manually.js
function flowManually(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, height, ex, ey } = pen.calculative.worldRect;
  const offsetY = height / 4;
  path.moveTo(x, y + offsetY);
  path.lineTo(ex, y);
  path.lineTo(ex, ey);
  path.lineTo(x, ey);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function flowManuallyAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0.125
    },
    {
      x: 1,
      y: 0.5
    },
    {
      x: 0.5,
      y: 1
    },
    {
      x: 0,
      y: 0.5
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/flow-diagram/src/parallel.js
function flowParallel(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, ex, ey } = pen.calculative.worldRect;
  path.moveTo(x, y);
  path.lineTo(ex, y);
  path.moveTo(x, ey);
  path.lineTo(ex, ey);
  if (path instanceof Path2D)
    return path;
}
function flowParallelAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 0.5,
      y: 1
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: index + "",
      x,
      y,
      penId: pen.id
    };
  });
}

// node_modules/@meta2d/flow-diagram/src/queue.js
function flowQueue(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height, ex, ey } = pen.calculative.worldRect;
  path.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, Math.PI * 2);
  path.moveTo(x + width / 2, ey);
  path.lineTo(ex, ey);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/flow-diagram/src/subprocess.js
function flowSubprocess(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, ex, ey } = pen.calculative.worldRect;
  const offsetX = width / 7;
  path.moveTo(x, y);
  path.lineTo(ex, y);
  path.lineTo(ex, ey);
  path.lineTo(x, ey);
  path.closePath();
  path.moveTo(x + offsetX, y);
  path.lineTo(x + offsetX, ey);
  path.moveTo(ex - offsetX, y);
  path.lineTo(ex - offsetX, ey);
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/flow-diagram/src/db.js
function flowDb(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, height, ex, ey } = pen.calculative.worldRect;
  const offsetY = height / 7;
  path.moveTo(x, y + offsetY);
  path.bezierCurveTo(x, y - offsetY / 2 | 0, ex, y - offsetY / 2 | 0, ex, y + offsetY);
  path.lineTo(ex, ey - offsetY);
  path.bezierCurveTo(ex, ey + offsetY / 2 | 0, x, ey + offsetY / 2 | 0, x, ey - offsetY);
  path.closePath();
  path.moveTo(x, ey - offsetY);
  path.bezierCurveTo(x, ey - offsetY * 2 | 0, ex, ey - offsetY * 2 | 0, ex, ey - offsetY);
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/flow-diagram/src/register.js
function flowPens() {
  return {
    flowComment,
    flowData,
    flowDb,
    flowDisplay,
    flowDocument,
    flowExternStorage,
    flowInternalStorage,
    flowManually,
    flowParallel,
    flowQueue,
    flowSubprocess
  };
}
function flowAnchors() {
  return {
    flowDocument: flowDocumentAnchors,
    flowManually: flowManuallyAnchors,
    flowParallel: flowParallelAnchors,
    flowComment: flowCommentAnchors,
    flowData: flowDataAnchors
  };
}
export {
  flowAnchors,
  flowComment,
  flowCommentAnchors,
  flowData,
  flowDataAnchors,
  flowDisplay,
  flowDocument,
  flowDocumentAnchors,
  flowExternStorage,
  flowInternalStorage,
  flowManually,
  flowManuallyAnchors,
  flowParallel,
  flowParallelAnchors,
  flowPens,
  flowQueue,
  flowSubprocess
};
//# sourceMappingURL=@meta2d_flow-diagram.js.map
