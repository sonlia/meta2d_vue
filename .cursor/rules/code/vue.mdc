---
description: 
globs: 
alwaysApply: true
---
# Vue开发规范
要符合 Vue 的设计理念
## 最佳实践
### 总体原则
在使用 Vue 3 的 Composition API 进行开发时，应特别注意模块间引用关系和逻辑组织方式，以避免出现 JavaScript 模块系统的循环依赖问题（Circular Dependency）。
- 避免直接相互引用的组件/模块之间共享逻辑
- 通过中间层解耦逻辑与组件
- 优先使用组合函数封装逻辑，而不是组件间直接调用
### 模块设计建议
- 使用 composables/ 目录统一管理逻辑复用单元
  将可复用的业务逻辑封装在 useXXX() 函数中
 
- 提取共享状态和服务到独立模块
  当多个组件需要访问相同的状态或方法时，创建一个中间模块（如 sharedService.js 或 store.js）
- 不要在组件之间直接导入对方的方法或状态
### 应避免的模式
- 避免直接修改props
- 避免过于复杂的计算属性
- 避免在模板中使用复杂表达式
- 避免选项式API（methods、data等）
- **严禁使用事件总线**：严格禁止使用全局事件总线（如mitt/tiny-emitter等库或自定义EventBus）进行组件通信，这会导致难以追踪的数据流和隐式依赖。
- **禁用provide/inject和mitt**：避免使用隐式依赖的通信方式。
### 组合式API常见问题
- **避免监听计算属性**：优先监听原始ref而非计算属性
- **避免ref闭包问题**：状态定义在模块级别而非hook内部
- **正确监听深层对象**：使用deep选项监听复杂对象
## 代码风格与结构
### 核心原则
- **双向绑定**：使用`computed`的`set/get`实现双向数据更新。
- **组合式API优先**：强制使用`<script setup>`语法，避免选项式API。
- **状态管理层级**：组件内状态 → `Composables` → `Pinia`（全局）。
### 组件设计原则
- **职责划分**：
  - 组件只负责UI逻辑处理。
  - 业务逻辑放在组合式API中实现。
  - 全局状态才使用Pinia管理。
- **单一职责**：每个组件只负责一项主要功能。
### 组件通信策略
- **优先使用组合式API**：组件间数据共享优先使用组合式API。
- **少量使用Props与Events**：只在组件封装时少量慎重使用。
- **全局状态**：复杂全局状态使用Pinia管理,需要storeToRefs保持响应性。
## 代码书写顺序
### script setup内部顺序
为避免潜在的错误和保持代码可读性，组件内部的代码必须按以下顺序书写：
1. **导入语句**：按库、组件、类型分组
2. **Props和Emits定义**：组件接口定义
3. **响应式数据和计算属性**：状态定义（必须在生命周期钩子之前）
4. **生命周期钩子**：必须在状态定义之后
5. **方法定义**：事件处理和功能函数
6. **监听器**：变化处理放在最后

###  组件分类
- **UI组件**：与业务无关的基础组件（如按钮、卡片、输入框等）
- **通用组件**：跨页面使用的功能组件（如表格、表单、图表等）
- **功能组件**：特定业务功能的组件（如用户卡片、产品列表等）
- **页面组件**：对应路由的完整页面
- **布局组件**：页面整体布局结构
## 文档与注释
### 代码注释
- 复杂逻辑添加JSDoc式注释。



